import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io

def generate_csv_template():
    """Generate a CSV template with sample data for fraud detection"""
    
    # Sample categories and merchants
    categories = [
        'grocery_pos', 'gas_transport', 'misc_net', 'grocery_net', 'shopping_net',
        'shopping_pos', 'entertainment', 'food_dining', 'personal_care', 'health_fitness',
        'travel', 'kids_pets', 'home', 'misc_pos'
    ]
    
    merchants = [
        'Amazon', 'Walmart', 'Target', 'Starbucks', 'McDonalds', 'Shell', 'Exxon',
        'Home Depot', 'CVS', 'Walgreens', 'Best Buy', 'Costco', 'Safeway', 'Kroger'
    ]
    
    jobs = [
        'Engineer', 'Teacher', 'Doctor', 'Lawyer', 'Manager', 'Sales', 'Student',
        'Retired', 'Unemployed', 'Artist', 'Writer', 'Nurse', 'Police', 'Firefighter'
    ]
    
    states = ['CA', 'NY', 'TX', 'FL', 'IL', 'PA', 'OH', 'GA', 'NC', 'MI']
    
    # Generate sample data
    sample_data = []
    
    for i in range(10):  # Generate 10 sample rows
        # Current time minus random days
        base_time = datetime.now() - timedelta(days=np.random.randint(0, 30))
        unix_time = int(base_time.timestamp())
        
        sample_row = {
            'merchant': np.random.choice(merchants),
            'category': np.random.choice(categories),
            'amt': round(np.random.uniform(10.0, 500.0), 2),
            'gender': np.random.choice(['M', 'F']),
            'city': f'City{i}',
            'state': np.random.choice(states)
        }
        
        sample_data.append(sample_row)
    
    # Create DataFrame
    df = pd.DataFrame(sample_data)
    
    # Convert to CSV string
    csv_buffer = io.StringIO()
    df.to_csv(csv_buffer, index=False)
    csv_string = csv_buffer.getvalue()
    
    return csv_string

def get_template_description():
    """Get description of template fields"""
    description = """
    CSV Template Field Descriptions:
    
    merchant: Name of the merchant/business
    category: Transaction category (grocery_pos, gas_transport, etc.)
    amt: Transaction amount in dollars
    gender: Customer's gender (M/F)
    city: City name
    state: State abbreviation (2 letters)
    
    Note: All fields are required for accurate fraud detection.
    Other required fields will be auto-generated by the system.
    """
    
    return description

def validate_csv_format(df):
    """Validate that uploaded CSV matches expected format"""
    required_columns = [
        'merchant', 'category', 'amt', 'gender', 'city', 'state'
    ]
    
    errors = []
    warnings = []
    
    # Check for missing columns
    missing_cols = set(required_columns) - set(df.columns)
    if missing_cols:
        errors.append(f"Missing required columns: {', '.join(missing_cols)}")
    
    # Check for extra columns
    extra_cols = set(df.columns) - set(required_columns)
    if extra_cols:
        warnings.append(f"Extra columns found (will be ignored): {', '.join(extra_cols)}")
    
    # Check data types and ranges for key fields
    if 'amt' in df.columns:
        if not pd.api.types.is_numeric_dtype(df['amt']):
            errors.append("Amount column (amt) must contain numeric values")
        elif (df['amt'] <= 0).any():
            warnings.append("Some amount values are zero or negative")
    
    if 'lat' in df.columns:
        if not pd.api.types.is_numeric_dtype(df['lat']):
            errors.append("Latitude column (lat) must contain numeric values")
        elif not df['lat'].between(-90, 90).all():
            errors.append("Latitude values must be between -90 and 90")
    
    if 'long' in df.columns:
        if not pd.api.types.is_numeric_dtype(df['long']):
            errors.append("Longitude column (long) must contain numeric values")
        elif not df['long'].between(-180, 180).all():
            errors.append("Longitude values must be between -180 and 180")
    
    return {'errors': errors, 'warnings': warnings}
